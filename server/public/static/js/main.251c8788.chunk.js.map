{"version":3,"sources":["slices/appSlice.js","apis/emailReportsList.js","components/MainAppBar.js","components/SearchResults/EmailReportTableBar.js","components/SearchResults/TableBodyRows.js","components/SearchResults/EmailReportTable.js","components/SearchResults/EmailReportMainTable.js","components/SearchResults/EmailReportTableResults.js","App.js","reportWebVitals.js","slices/emailReportsSlice.js","store/store.js","index.js","common/date.js"],"names":["appSlice","createSlice","name","initialState","isDarkMode","reducers","changeDarkMode","state","actions","BASE_URL","getEmailReportsList","createAsyncThunk","a","axios","method","url","data","getEmailReportsListByRange","range","params","treatEmailReportsListByRange","treatEmailReportsList","useStyles","makeStyles","theme","menuButton","marginRight","spacing","hide","display","grow","flexGrow","MainAppBar","darkModeHandler","classes","AppBar","position","Toolbar","Typography","variant","noWrap","className","IconButton","onClick","tableBody","height","tableSearch","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginLeft","width","breakpoints","up","tableSearchIcon","padding","pointerEvents","alignItems","justifyContent","tableInputRoot","color","tableInputInput","paddingLeft","transition","transitions","create","serachIconButton","EmailReportTableBar","dispatch","useDispatch","useSelector","rows","emailReports","loading","useState","setRange","handleGetByRange","useCallback","useEffect","length","component","TextField","value","onChange","e","currentTarget","type","helperText","disabled","Boolean","Button","Row","index","style","page","rowsPerPage","item","slice","recurrence","nextEventDate","recipientsList","timezone","ListItem","button","Grid","container","xs","treated","dateFormater","millisecondsDate","dateMs","dateFormat","Tooltip","title","toString","replace","days","time","TableBodyRows","itemCount","itemSize","Math","max","itemData","tablePaper","flexFlow","marginBottom","table","minWidth","EmailReportTable","Table","TableBody","EmailReportMainTable","setPage","setRowsPerPage","TablePagination","rowsPerPageOptions","label","count","onPageChange","event","newPage","onRowsPerPageChange","parseInt","target","EmailReportTableResults","Paper","paddingTop","contentRoot","minHeight","App","app","useMemo","createTheme","ThemeProvider","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","emailReportsSlice","extraReducers","fulfilled","action","payload","pending","map","treatEmails","configureStore","reducer","appReducer","emailReportsReducer","ReactDOM","render","StrictMode","store","document","getElementById","module","exports","date","Date","DD","getDate","MM","getMonth","YYYY","getFullYear","HH","getHours","hh","mm","getMinutes","ss","getSeconds","milliseconds","getMilliseconds","SSS","Number","dateFormatTimeString","toFixed"],"mappings":"gOAEaA,EAAWC,YAAY,CAClCC,KAAM,MACNC,aAAc,CACZC,YAAY,GAEdC,SAAU,CACRC,eAAgB,SAACC,GACfA,EAAMH,YAAcG,EAAMH,eAKjBE,EAAmBN,EAASQ,QAA5BF,eAEAN,IAAf,Q,0CCbaS,EAAW,yCAEXC,EAAsBC,YACjC,mCADiD,sBAEjD,4BAAAC,EAAA,sEACqBC,IAAM,CACvBC,OAAQ,MACRC,IAAI,GAAD,OAAKN,EAAL,cAHP,cACQO,EADR,yBAKSA,EAAKA,MALd,4CASWC,EAA6BN,YACxC,0CADwD,uCAExD,WAAOO,GAAP,eAAAN,EAAA,sEACqBC,IAAM,CACvBC,OAAQ,MACRC,IAAI,GAAD,OAAKN,EAAL,mBACHU,OAAQ,CAAED,WAJd,cACQF,EADR,yBAMSA,EAAKA,MANd,2CAFwD,uDAY7CI,EAA+BT,YAC1C,4CAD0D,uCAE1D,WAAOO,GAAP,eAAAN,EAAA,sEACqBC,IAAM,CACvBC,OAAQ,MACRC,IAAI,GAAD,OAAKN,EAAL,qBACHU,OAAQ,CAAED,WAJd,cACQF,EADR,yBAMSA,EAAKA,MANd,2CAF0D,uDAY/CK,EAAwBV,YACnC,qCADmD,sBAEnD,4BAAAC,EAAA,sEACqBC,IAAM,CACvBC,OAAQ,MACRC,IAAI,GAAD,OAAKN,EAAL,YAHP,cACQO,EADR,yBAKSA,EAAKA,MALd,4C,6EChCIM,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCC,WAAY,CACVC,YAAaF,EAAMG,QAAQ,IAE7BC,KAAM,CACJC,QAAS,QAEXC,KAAM,CACJC,SAAU,OAqBCC,MAjBf,YAAsD,IAAhCC,EAA+B,EAA/BA,gBAAiB7B,EAAc,EAAdA,WAC/B8B,EAAUZ,IAChB,OACE,cAACa,EAAA,EAAD,CAAQC,SAAS,QAAjB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAKC,QAAM,EAA/B,yBAGA,qBAAKC,UAAWP,EAAQJ,OACxB,cAACY,EAAA,EAAD,CAAYC,QAASV,EAArB,SACG7B,EAAa,cAAC,IAAD,IAAgB,cAAC,IAAD,Y,qFCXlCkB,EAAYC,aAAW,SAACC,GAAD,MAAY,CACvCoB,UAAW,CACTC,OAAQ,QAEVC,YAAY,aACVV,SAAU,WACVW,aAAcvB,EAAMwB,MAAMD,aAC1BE,gBAAiBC,YAAM1B,EAAM2B,QAAQC,OAAOC,MAAO,KACnD,UAAW,CACTJ,gBAAiBC,YAAM1B,EAAM2B,QAAQC,OAAOC,MAAO,MAErDC,WAAY,EACZC,MAAO,QACN/B,EAAMgC,YAAYC,GAAG,MAAQ,CAC5BH,WAAY9B,EAAMG,QAAQ,GAC1B4B,MAAO,SAGXG,gBAAiB,CACfC,QAASnC,EAAMG,QAAQ,EAAG,GAC1BkB,OAAQ,OACRT,SAAU,WACVwB,cAAe,OACf/B,QAAS,OACTgC,WAAY,SACZC,eAAgB,UAElBC,eAAgB,CACdC,MAAO,WAETC,gBAAgB,aACdN,QAASnC,EAAMG,QAAQ,EAAG,EAAG,EAAG,GAChCuC,YAAY,cAAD,OAAgB1C,EAAMG,QAAQ,GAA9B,OACXwC,WAAY3C,EAAM4C,YAAYC,OAAO,SACrCd,MAAO,QACN/B,EAAMgC,YAAYC,GAAG,MAAQ,CAC5BF,MAAO,OACP,UAAW,CACTA,MAAO,UAIbzB,KAAM,CACJC,SAAU,GAEZuC,iBAAkB,CAChBX,QAAS,QA4EEY,MAxEf,WACE,IAAMrC,EAAUZ,IACVkD,EAAWC,cACjB,EAA0BC,aAAY,SAACnE,GAAD,MAAY,CAChDoE,KAAMpE,EAAMqE,aAAaD,KACzBE,QAAStE,EAAMqE,aAAaC,YAFtBF,EAAR,EAAQA,KAAME,EAAd,EAAcA,QAId,EAA0BC,mBAAS,IAAnC,mBAAO5D,EAAP,KAAc6D,EAAd,KAWMC,EAAmBC,uBAAY,WACnCT,EAASvD,EAA2BC,MACnC,CAACsD,EAAUtD,IAiBd,OAPAgE,qBAAU,YACHL,GAAW3D,GAAyB,IAAhByD,EAAKQ,QAC5BH,MAGD,CAACH,EAASG,EAAkB9D,IAG7B,cAACiB,EAAA,EAAD,CAAQC,SAAS,SAAjB,SACE,eAACC,EAAA,EAAD,WACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,KAAK6C,UAAU,MAAnC,mCAGA,qBAAK3C,UAAWP,EAAQJ,OACxB,cAACuD,EAAA,EAAD,CACEC,MAAOpE,EACPqE,SArCY,SAACC,GACnBT,EAASS,EAAEC,cAAcH,QAqCnBI,KAAK,SACLC,WAAW,sBAEb,cAACjD,EAAA,EAAD,CAAYkD,UAAWC,QAAQ3E,GAAQyB,QArCzB,SAAC6C,GACnBT,EAAS,IACTP,EAAS9D,MAmCL,SACE,cAAC,IAAD,MAEF,cAACgC,EAAA,EAAD,CAAYkD,UAAW1E,EAAOyB,QAASqC,EAAvC,SACE,cAAC,IAAD,MAEF,qBAAKvC,UAAWP,EAAQJ,OACxB,cAACgE,EAAA,EAAD,CACEF,SAA0B,IAAhBjB,EAAKQ,SAAiBU,QAAQ3E,GACxCyB,QArCa,WACnB6B,EAASpD,EAA6BF,KAqChC8C,MAAM,YAHR,+BAOA,cAAC8B,EAAA,EAAD,CAAQnD,QAtCM,WAClB6B,EAASnD,MAqCyB2C,MAAM,YAApC,sC,4FC5HF+B,GAAM,SAAC,GAA4B,IAA1B/E,EAAyB,EAAzBA,KAAMgF,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,MAClBtB,EAA4B3D,EAA5B2D,KAAMuB,EAAsBlF,EAAtBkF,KAAMC,EAAgBnF,EAAhBmF,YACdC,EAAOzB,EAAK0B,MAChBH,EAAOC,EACPD,EAAOC,EAAcA,GACrBH,GAEF,IAAKI,EAAM,OAAO,KAClB,IAAQE,EACNF,EADME,WAAYC,EAClBH,EADkBG,cAAeC,EACjCJ,EADiCI,eAAgBC,EACjDL,EADiDK,SAEnD,OACE,cAACC,EAAA,EAAD,CAAUC,QAAM,EAACV,MAAOA,EAAxB,SACE,eAACW,EAAA,EAAD,CAAMC,WAAS,EAAf,UACE,cAACD,EAAA,EAAD,CAAMR,MAAI,EAACU,GAAI,EAAf,SACE,cAAC,KAAD,CACE9C,MACEoC,EAAKvB,QACD,SACAuB,EAAKW,QACL,UACA,YAIV,cAACH,EAAA,EAAD,CAAMR,MAAI,EAACU,IAAE,EAAb,SACE,cAACxE,EAAA,EAAD,UACG0E,wBAAa,CACZC,iBAAkBV,EAAcW,OAChCC,WAAY,yBAIlB,cAACP,EAAA,EAAD,CAAMR,MAAI,EAACU,IAAE,EAAb,SACE,cAACM,EAAA,EAAD,CACEC,MAAOb,EAAec,WAAWC,QAAQ,IAAK,MADhD,SAGE,gCAAMf,EAAerB,OAArB,qBAGJ,cAACyB,EAAA,EAAD,CAAMR,MAAI,EAACU,IAAE,EAAb,SACGL,IAEH,eAACG,EAAA,EAAD,CAAMR,MAAI,EAACU,IAAE,EAAb,mBACSR,EAAWkB,KAAKF,WADzB,OACyChB,EAAWmB,cA8B7CC,OAvBf,YAAgE,IAAvCC,EAAsC,EAAtCA,UAAWhD,EAA2B,EAA3BA,KAAMuB,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,YAC9C,OACE,cAAC,KAAD,UACG,gBAAGtD,EAAH,EAAGA,OAAQU,EAAX,EAAWA,MAAX,OACC,cAAC,KAAD,CACEd,UAAU,OACVI,OAAQA,EACR8E,UAAWA,EACXC,SAAUC,KAAKC,IAAIjF,EAAS8E,EAAW,IACvCpE,MAAOA,EACPwE,SAAU,CACRpD,OACAuB,OACAC,eATJ,SAYGJ,SCzELzE,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCwG,WAAY,CACVzE,MAAO,MACP1B,QAAS,OACToG,SAAU,gBACVpF,OAAQ,oBACRqF,aAAc,QAEhBC,MAAO,CACLC,SAAU,KAEZxF,UAAW,CACTC,OAAQ,uCAqBGwF,OAjBf,YAAwD,IAA5BnC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,YAAaxB,EAAQ,EAARA,KACvCzC,EAAUZ,KAEhB,OACE,cAACgH,EAAA,EAAD,CAAO7F,UAAWP,EAAQiG,MAAO/C,UAAU,MAA3C,SACE,cAACmD,EAAA,EAAD,CAAWnD,UAAU,MAAM3C,UAAWP,EAAQU,UAA9C,SACE,cAAC,GAAD,CACE+E,UAAWxB,EACXxB,KAAMA,EACNuB,KAAMA,EACNC,YAAaA,SCgBRqC,OAzCf,WACE,MAAwB1D,mBAAS,GAAjC,mBAAOoB,EAAP,KAAauC,EAAb,KACA,EAAsC3D,mBAAS,GAA/C,mBAAOqB,EAAP,KAAoBuC,EAApB,KACQ/D,EAASD,aAAY,SAACnE,GAAD,MAAY,CACvCoE,KAAMpE,EAAMqE,aAAaD,SADnBA,KAaR,OACE,qCACE,cAAC,GAAD,CACEuB,KAAMA,EACNC,YAAaA,EACbxB,KAAMA,IAER,cAACgE,EAAA,EAAD,CACEC,mBAAoB,CAClB,EACA,GACA,GACA,CAAEtD,MAAOX,EAAKQ,OAAQ0D,MAAO,QAE/BzD,UAAU,MACV0D,MAAOnE,EAAKQ,OACZgB,YAAaA,EACbD,KAAMA,EACN6C,aA3BmB,SAACC,EAAOC,GAC/BR,EAAQQ,IA2BJC,oBAxB0B,SAACF,GAC/BN,EAAeS,SAASH,EAAMI,OAAO9D,MAAO,KAC5CmD,EAAQ,UCbNnH,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCwG,WAAY,CACVzE,MAAO,MACP1B,QAAS,OACToG,SAAU,gBACVpF,OAAQ,oBACRqF,aAAc,YA+BHmB,OA3Bf,WACE,IAAMnH,EAAUZ,KAChB,OACE,eAACgI,EAAA,EAAD,CAAO7G,UAAWP,EAAQ8F,WAA1B,UACE,cAAC,EAAD,IACA,eAACpB,EAAA,EAAD,CAAMC,WAAS,EAACZ,MAAO,CAAEpD,OAAQ,OAAQ0G,WAAY,OAArD,UACE,cAAC3C,EAAA,EAAD,CAAMR,MAAI,EAACU,GAAI,EAAf,SACE,cAACxE,EAAA,EAAD,CAAYC,QAAQ,SAApB,sBAEF,cAACqE,EAAA,EAAD,CAAMR,MAAI,EAACU,IAAE,EAAb,SACE,cAACxE,EAAA,EAAD,CAAYC,QAAQ,SAApB,+BAEF,cAACqE,EAAA,EAAD,CAAMR,MAAI,EAACU,IAAE,EAAb,SACE,cAACxE,EAAA,EAAD,CAAYC,QAAQ,SAApB,0BAEF,cAACqE,EAAA,EAAD,CAAMR,MAAI,EAACU,IAAE,EAAb,SACE,cAACxE,EAAA,EAAD,CAAYC,QAAQ,SAApB,wBAEF,cAACqE,EAAA,EAAD,CAAMR,MAAI,EAACU,IAAE,EAAb,SACE,cAACxE,EAAA,EAAD,CAAYC,QAAQ,SAApB,kCAGJ,cAAC,GAAD,QC3BAjB,GAAYC,aAAW,SAACC,GAAD,MAAY,CACvCgI,YAAa,CACX3H,QAAS,OACToG,SAAU,gBACVpE,WAAY,SACZ4F,UAAW,qBACX1H,SAAU,EACVwH,WAAY,YA4CDG,I,GAAAA,GAxCf,WACE,IAAQtJ,EAAesE,aAAY,SAACnE,GAAD,MAAY,CAC7CH,WAAYG,EAAMoJ,IAAIvJ,eADhBA,WAGF8B,EAAUZ,KACVkD,EAAWC,cAEXjD,EAAQoI,mBACZ,kBACEC,YAAY,CACV1G,QAAS,CACPuC,KAAMtF,EAAa,OAAS,aAGlC,CAACA,IAWH,OAJA8E,qBAAU,WACRV,EAAS9D,OACR,CAAC8D,IAGF,8BACE,cAACsF,EAAA,EAAD,CAAetI,MAAOA,EAAtB,SACE,eAAC8H,EAAA,EAAD,CAAO7G,UAAWP,EAAQsH,YAA1B,UACE,cAAC,EAAD,CACEvH,gBAbc,WACtBuC,EAASlE,MAaDF,WAAYA,IAEd,cAAC,GAAD,YC1CK2J,GAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,O,SCCDQ,GAAoBvK,YAAY,CAC3CC,KAAM,eACNC,aAAc,CACZwE,KAAM,GACNE,SAAS,GAEXxE,SAAU,GACVoK,eAAa,qBACV/J,EAAoBgK,WAAY,SAACnK,EAAOoK,GACvCpK,EAAMoE,KAAOgG,EAAOC,WAFX,eAIV3J,EAA2ByJ,WAAY,SAACnK,EAAOoK,GAC9CpK,EAAMoE,KAAOgG,EAAOC,WALX,eAOVxJ,EAA6ByJ,SAAU,SAACtK,EAAOoK,GAC9CpK,EAAMoE,KAAOpE,EAAMoE,KAAKmG,KAAI,SAAC1E,GAC3B,OAAO,6BACFA,GADL,IAEEvB,SAAS,OAGbtE,EAAMsE,SAAU,KAdP,eAgBVzD,EAA6BsJ,WAAY,SAACnK,EAAOoK,GAChDpK,EAAMoE,KAAOpE,EAAMoE,KAAKmG,KAAI,SAAC1E,GAC3B,OAAO,6BACFA,GADL,IAEEvB,SAAS,OAGbtE,EAAMsE,SAAU,KAvBP,eAyBVxD,EAAsBwJ,SAAU,SAACtK,EAAOoK,GACvCpK,EAAMoE,KAAOpE,EAAMoE,KAAKmG,KAAI,SAAC1E,GAC3B,OAAO,6BACFA,GADL,IAEEvB,SAAS,OAGbtE,EAAMsE,SAAU,KAhCP,eAkCVxD,EAAsBqJ,WAAY,SAACnK,EAAOoK,GACzCpK,EAAMoE,KAAOpE,EAAMoE,KAAKmG,KAAI,SAAC1E,GAC3B,OAAO,6BACFA,GADL,IAEEvB,SAAS,OAGbtE,EAAMsE,SAAU,KAzCP,MAgDA2F,IAFgBA,GAAkBhK,QAAlCuK,YAEAP,GAAf,SC3DeQ,eAAe,CAC5BC,QAAS,CACPtB,IAAKuB,EACLtG,aAAcuG,MCClBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUC,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJC,SAASC,eAAe,SAM1B1B,M,iBCuDA2B,EAAOC,QAAU,CAAE3E,aA3EE,SAAC,GAAsC,IAApCC,EAAmC,EAAnCA,iBAAkBE,EAAiB,EAAjBA,WAClCyE,EAAO,IAAIC,KAAK5E,GAClB6E,EAAKF,EAAKG,UACVD,EAAK,KACPA,EAAE,WAAOA,IAEX,IAAIE,EAAKJ,EAAKK,WAAa,EACvBD,EAAK,KACPA,EAAE,WAAOA,IAEX,IAAME,EAAON,EAAKO,cACdC,EAAKR,EAAKS,WACVD,EAAK,KACPA,EAAE,WAAOA,IAEX,IAAIE,EAAKV,EAAKS,WAAa,IAAM,GAC7BC,EAAK,KACPA,EAAE,WAAOA,IAEX,IAAIC,EAAKX,EAAKY,aACVD,EAAK,KACPA,EAAE,WAAOA,IAEX,IAAIE,EAAKb,EAAKc,aACVD,EAAK,KACPA,EAAE,WAAOA,IAEX,IAAME,EAAef,EAAKgB,kBACtBC,EAAMjB,EAAKgB,kBACXD,EAAe,KACjBE,EAAG,WAAOA,IAERF,EAAe,MACjBE,EAAG,WAAOA,IAEZA,EAAMC,OAAO,KAAD,OAAMD,IAClB,IAAIE,EAAuB5F,EAoC3B,OAnCA4F,EAAuBA,EAAqBxF,QAAQ,KAAMuE,GAC1DA,EAAKF,EAAKG,UAEVgB,GADAA,EAAuBA,EAAqBxF,QAAQ,IAAKuE,IACbvE,QAAQ,KAAMyE,GAC1DA,EAAKJ,EAAKK,WAAa,EAOvBc,GAJAA,GADAA,GADAA,EAAuBA,EAAqBxF,QAAQ,IAAKyE,IACbzE,QAAQ,OAAQ2E,IAChB3E,QAC1C,KACA2E,EAAK5E,WAAWjB,MAAM,KAEoBkB,QAAQ,KAAM6E,GAC1DA,EAAKR,EAAKS,WAEVU,GADAA,EAAuBA,EAAqBxF,QAAQ,IAAK6E,IACb7E,QAAQ,KAAM+E,GAC1DA,EAAKV,EAAKS,WAAa,IAAM,GAE7BU,GADAA,EAAuBA,EAAqBxF,QAAQ,IAAK+E,IACb/E,QAAQ,KAAMgF,GAC1DA,EAAKX,EAAKY,aAEVO,GADAA,EAAuBA,EAAqBxF,QAAQ,IAAKgF,IACbhF,QAAQ,KAAMkF,GAC1DA,EAAKb,EAAKc,aAUVK,GAJAA,GAJAA,GADAA,EAAuBA,EAAqBxF,QAAQ,IAAKkF,IACblF,QAC1C,MACAsF,EAAIG,QAAQ,GAAG3G,MAAM,KAEqBkB,QAC1C,KACAsF,EAAIG,QAAQ,GAAG3G,MAAM,KAEqBkB,QAC1C,IACAsF,EAAIG,QAAQ,GAAG3G,MAAM,Q","file":"static/js/main.251c8788.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit';\r\n\r\nexport const appSlice = createSlice({\r\n  name: 'app',\r\n  initialState: {\r\n    isDarkMode: true,\r\n  },\r\n  reducers: {\r\n    changeDarkMode: (state) => {\r\n      state.isDarkMode = !state.isDarkMode;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { changeDarkMode } = appSlice.actions;\r\n\r\nexport default appSlice.reducer;\r\n","import axios from 'axios';\r\nimport { createAsyncThunk } from '@reduxjs/toolkit';\r\n\r\nexport const BASE_URL = 'http://localhost:5000/api/emailReports';\r\n\r\nexport const getEmailReportsList = createAsyncThunk(\r\n  'emailReports/getEmailReportsList',\r\n  async () => {\r\n    const data = await axios({\r\n      method: 'get',\r\n      url: `${BASE_URL}/getList`,\r\n    });\r\n    return data.data;\r\n  },\r\n);\r\n\r\nexport const getEmailReportsListByRange = createAsyncThunk(\r\n  'emailReports/getEmailReportsListByRange',\r\n  async (range) => {\r\n    const data = await axios({\r\n      method: 'get',\r\n      url: `${BASE_URL}/getListByRange`,\r\n      params: { range },\r\n    });\r\n    return data.data;\r\n  },\r\n);\r\n\r\nexport const treatEmailReportsListByRange = createAsyncThunk(\r\n  'emailReports/treatEmailReportsListByRange',\r\n  async (range) => {\r\n    const data = await axios({\r\n      method: 'get',\r\n      url: `${BASE_URL}/treatListByRange`,\r\n      params: { range },\r\n    });\r\n    return data.data;\r\n  },\r\n);\r\n\r\nexport const treatEmailReportsList = createAsyncThunk(\r\n  'emailReports/treatEmailReportsList',\r\n  async () => {\r\n    const data = await axios({\r\n      method: 'get',\r\n      url: `${BASE_URL}/treat`,\r\n    });\r\n    return data.data;\r\n  },\r\n);\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  AppBar,\r\n  IconButton,\r\n  Toolbar,\r\n  Typography,\r\n} from '@material-ui/core';\r\nimport LightIcon from '@material-ui/icons/Brightness7';\r\nimport DarkIcon from '@material-ui/icons/Brightness4';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n  },\r\n  hide: {\r\n    display: 'none',\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n}));\r\n\r\nfunction MainAppBar({ darkModeHandler, isDarkMode }) {\r\n  const classes = useStyles();\r\n  return (\r\n    <AppBar position=\"fixed\">\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" noWrap>\r\n          Api Results\r\n        </Typography>\r\n        <div className={classes.grow} />\r\n        <IconButton onClick={darkModeHandler}>\r\n          {isDarkMode ? <LightIcon /> : <DarkIcon />}\r\n        </IconButton>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default MainAppBar;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { alpha, makeStyles } from '@material-ui/core/styles';\r\nimport {\r\n  AppBar,\r\n  IconButton,\r\n  Toolbar,\r\n  Typography,\r\n  TextField,\r\n  Button,\r\n} from '@material-ui/core';\r\nimport RotateLeftIcon from '@material-ui/icons/RotateLeft';\r\nimport SearchIcon from '@material-ui/icons/Search';\r\nimport { useState, useEffect, useCallback } from 'react';\r\n\r\nimport {\r\n  getEmailReportsListByRange,\r\n  getEmailReportsList,\r\n  treatEmailReportsListByRange,\r\n  treatEmailReportsList,\r\n} from '../../apis/emailReportsList';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tableBody: {\r\n    height: '95vh',\r\n  },\r\n  tableSearch: {\r\n    position: 'relative',\r\n    borderRadius: theme.shape.borderRadius,\r\n    backgroundColor: alpha(theme.palette.common.white, 0.15),\r\n    '&:hover': {\r\n      backgroundColor: alpha(theme.palette.common.white, 0.25),\r\n    },\r\n    marginLeft: 0,\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      marginLeft: theme.spacing(1),\r\n      width: 'auto',\r\n    },\r\n  },\r\n  tableSearchIcon: {\r\n    padding: theme.spacing(0, 2),\r\n    height: '100%',\r\n    position: 'absolute',\r\n    pointerEvents: 'none',\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'center',\r\n  },\r\n  tableInputRoot: {\r\n    color: 'inherit',\r\n  },\r\n  tableInputInput: {\r\n    padding: theme.spacing(1, 1, 1, 0),\r\n    paddingLeft: `calc(1em + ${theme.spacing(4)}px)`,\r\n    transition: theme.transitions.create('width'),\r\n    width: '100%',\r\n    [theme.breakpoints.up('sm')]: {\r\n      width: '12ch',\r\n      '&:focus': {\r\n        width: '20ch',\r\n      },\r\n    },\r\n  },\r\n  grow: {\r\n    flexGrow: 1,\r\n  },\r\n  serachIconButton: {\r\n    padding: 10,\r\n  },\r\n}));\r\n\r\nfunction EmailReportTableBar() {\r\n  const classes = useStyles();\r\n  const dispatch = useDispatch();\r\n  const { rows, loading } = useSelector((state) => ({\r\n    rows: state.emailReports.rows,\r\n    loading: state.emailReports.loading,\r\n  }));\r\n  const [range, setRange] = useState('');\r\n\r\n  const handleRange = (e) => {\r\n    setRange(e.currentTarget.value);\r\n  };\r\n\r\n  const handleClear = (e) => {\r\n    setRange('');\r\n    dispatch(getEmailReportsList());\r\n  };\r\n\r\n  const handleGetByRange = useCallback(() => {\r\n    dispatch(getEmailReportsListByRange(range));\r\n  }, [dispatch, range]);\r\n\r\n  const handleReport = () => {\r\n    dispatch(treatEmailReportsListByRange(range));\r\n  };\r\n\r\n  const handleTreat = () => {\r\n    dispatch(treatEmailReportsList());\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (!loading && range && rows.length !== 0) {\r\n      handleGetByRange();\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [loading, handleGetByRange, range]);\r\n\r\n  return (\r\n    <AppBar position=\"sticky\">\r\n      <Toolbar>\r\n        <Typography variant=\"h6\" component=\"div\">\r\n          Email Reports Results\r\n        </Typography>\r\n        <div className={classes.grow} />\r\n        <TextField\r\n          value={range}\r\n          onChange={handleRange}\r\n          type=\"number\"\r\n          helperText=\"Get List By Hours\"\r\n        />\r\n        <IconButton disabled={!Boolean(range)} onClick={handleClear}>\r\n          <RotateLeftIcon />\r\n        </IconButton>\r\n        <IconButton disabled={!range} onClick={handleGetByRange}>\r\n          <SearchIcon />\r\n        </IconButton>\r\n        <div className={classes.grow} />\r\n        <Button\r\n          disabled={rows.length === 0 || !Boolean(range)}\r\n          onClick={handleReport}\r\n          color=\"secondary\"\r\n        >\r\n          Manual Treat List\r\n        </Button>\r\n        <Button onClick={handleTreat} color=\"secondary\">\r\n          Treat ALL IN RANGE\r\n        </Button>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default EmailReportTableBar;\r\n","import {\r\n  Grid,\r\n  ListItem,\r\n  Typography,\r\n  Tooltip,\r\n} from '@material-ui/core';\r\nimport Brightness1Icon from '@material-ui/icons/Brightness1';\r\nimport { FixedSizeList } from 'react-window';\r\nimport AutoSizer from 'react-virtualized-auto-sizer';\r\nimport { dateFormater } from '../../common/date';\r\n\r\nconst Row = ({ data, index, style }) => {\r\n  const { rows, page, rowsPerPage } = data;\r\n  const item = rows.slice(\r\n    page * rowsPerPage,\r\n    page * rowsPerPage + rowsPerPage,\r\n  )[index];\r\n\r\n  if (!item) return null;\r\n  const { recurrence, nextEventDate, recipientsList, timezone } =\r\n    item;\r\n  return (\r\n    <ListItem button style={style}>\r\n      <Grid container>\r\n        <Grid item xs={1}>\r\n          <Brightness1Icon\r\n            color={\r\n              item.loading\r\n                ? 'action'\r\n                : item.treated\r\n                ? 'primary'\r\n                : 'error'\r\n            }\r\n          />\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Typography>\r\n            {dateFormater({\r\n              millisecondsDate: nextEventDate.dateMs,\r\n              dateFormat: 'DD-MM-YYYY HH:mm',\r\n            })}\r\n          </Typography>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Tooltip\r\n            title={recipientsList.toString().replace(',', '; ')}\r\n          >\r\n            <div>{recipientsList.length} Recipients</div>\r\n          </Tooltip>\r\n        </Grid>\r\n        <Grid item xs>\r\n          {timezone}\r\n        </Grid>\r\n        <Grid item xs>\r\n          every {recurrence.days.toString()} on {recurrence.time}\r\n        </Grid>\r\n      </Grid>\r\n    </ListItem>\r\n  );\r\n};\r\n\r\nfunction TableBodyRows({ itemCount, rows, page, rowsPerPage }) {\r\n  return (\r\n    <AutoSizer>\r\n      {({ height, width }) => (\r\n        <FixedSizeList\r\n          className=\"Grid\"\r\n          height={height}\r\n          itemCount={itemCount}\r\n          itemSize={Math.max(height / itemCount, 35)}\r\n          width={width}\r\n          itemData={{\r\n            rows,\r\n            page,\r\n            rowsPerPage,\r\n          }}\r\n        >\r\n          {Row}\r\n        </FixedSizeList>\r\n      )}\r\n    </AutoSizer>\r\n  );\r\n}\r\n\r\nexport default TableBodyRows;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport { Table, TableBody } from '@material-ui/core';\r\nimport TableBodyRows from './TableBodyRows';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tablePaper: {\r\n    width: '80%',\r\n    display: 'flex',\r\n    flexFlow: 'column nowrap',\r\n    height: 'calc(91vh - 7rem)',\r\n    marginBottom: '5rem',\r\n  },\r\n  table: {\r\n    minWidth: 750,\r\n  },\r\n  tableBody: {\r\n    height: 'calc(91vh - 64px - 52px - 7rem)',\r\n  },\r\n}));\r\n\r\nfunction EmailReportTable({ page, rowsPerPage, rows }) {\r\n  const classes = useStyles();\r\n\r\n  return (\r\n    <Table className={classes.table} component=\"div\">\r\n      <TableBody component=\"div\" className={classes.tableBody}>\r\n        <TableBodyRows\r\n          itemCount={rowsPerPage}\r\n          rows={rows}\r\n          page={page}\r\n          rowsPerPage={rowsPerPage}\r\n        />\r\n      </TableBody>\r\n    </Table>\r\n  );\r\n}\r\n\r\nexport default EmailReportTable;\r\n","import { useState } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { TablePagination } from '@material-ui/core';\r\nimport EmailReportTable from './EmailReportTable';\r\n\r\nfunction EmailReportMainTable() {\r\n  const [page, setPage] = useState(0);\r\n  const [rowsPerPage, setRowsPerPage] = useState(5);\r\n  const { rows } = useSelector((state) => ({\r\n    rows: state.emailReports.rows,\r\n  }));\r\n\r\n  const handleChangePage = (event, newPage) => {\r\n    setPage(newPage);\r\n  };\r\n\r\n  const handleChangeRowsPerPage = (event) => {\r\n    setRowsPerPage(parseInt(event.target.value, 10));\r\n    setPage(0);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <EmailReportTable\r\n        page={page}\r\n        rowsPerPage={rowsPerPage}\r\n        rows={rows}\r\n      />\r\n      <TablePagination\r\n        rowsPerPageOptions={[\r\n          5,\r\n          10,\r\n          25,\r\n          { value: rows.length, label: 'All' },\r\n        ]}\r\n        component=\"div\"\r\n        count={rows.length}\r\n        rowsPerPage={rowsPerPage}\r\n        page={page}\r\n        onPageChange={handleChangePage}\r\n        onRowsPerPageChange={handleChangeRowsPerPage}\r\n      />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default EmailReportMainTable;\r\n","import { makeStyles } from '@material-ui/core/styles';\r\nimport { Paper, Grid, Typography } from '@material-ui/core';\r\nimport EmailReportTableBar from './EmailReportTableBar';\r\nimport EmailReportMainTable from './EmailReportMainTable';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  tablePaper: {\r\n    width: '95%',\r\n    display: 'flex',\r\n    flexFlow: 'column nowrap',\r\n    height: 'calc(96vh - 7rem)',\r\n    marginBottom: '1rem',\r\n  },\r\n}));\r\n\r\nfunction EmailReportTableResults() {\r\n  const classes = useStyles();\r\n  return (\r\n    <Paper className={classes.tablePaper}>\r\n      <EmailReportTableBar />\r\n      <Grid container style={{ height: '3rem', paddingTop: '5px' }}>\r\n        <Grid item xs={1}>\r\n          <Typography variant=\"button\">status</Typography>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Typography variant=\"button\">Next Event Date</Typography>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Typography variant=\"button\">Recipients</Typography>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Typography variant=\"button\">timezone</Typography>\r\n        </Grid>\r\n        <Grid item xs>\r\n          <Typography variant=\"button\">Recurrence time</Typography>\r\n        </Grid>\r\n      </Grid>\r\n      <EmailReportMainTable />\r\n    </Paper>\r\n  );\r\n}\r\n\r\nexport default EmailReportTableResults;\r\n","import { useEffect, useMemo } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Paper } from '@material-ui/core';\nimport { makeStyles, createTheme } from '@material-ui/core/styles';\nimport { ThemeProvider } from '@material-ui/styles';\nimport { changeDarkMode } from './slices/appSlice';\nimport { getEmailReportsList } from './apis/emailReportsList';\nimport MainAppBar from './components/MainAppBar';\nimport EmailReportTableResults from './components/SearchResults/EmailReportTableResults';\n\nconst useStyles = makeStyles((theme) => ({\n  contentRoot: {\n    display: 'flex',\n    flexFlow: 'column nowrap',\n    alignItems: 'center',\n    minHeight: 'calc(100vh - 7rem)',\n    flexGrow: 1,\n    paddingTop: '7rem',\n  },\n}));\n\nfunction App() {\n  const { isDarkMode } = useSelector((state) => ({\n    isDarkMode: state.app.isDarkMode,\n  }));\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const theme = useMemo(\n    () =>\n      createTheme({\n        palette: {\n          type: isDarkMode ? 'dark' : 'light',\n        },\n      }),\n    [isDarkMode],\n  );\n\n  const darkModeHandler = () => {\n    dispatch(changeDarkMode());\n  };\n\n  useEffect(() => {\n    dispatch(getEmailReportsList());\n  }, [dispatch]);\n\n  return (\n    <div>\n      <ThemeProvider theme={theme}>\n        <Paper className={classes.contentRoot}>\n          <MainAppBar\n            darkModeHandler={darkModeHandler}\n            isDarkMode={isDarkMode}\n          />\n          <EmailReportTableResults />\n        </Paper>\n      </ThemeProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { createSlice } from '@reduxjs/toolkit';\r\nimport {\r\n  getEmailReportsList,\r\n  getEmailReportsListByRange,\r\n  treatEmailReportsListByRange,\r\n  treatEmailReportsList,\r\n} from '../apis/emailReportsList';\r\n\r\nexport const emailReportsSlice = createSlice({\r\n  name: 'emailReports',\r\n  initialState: {\r\n    rows: [],\r\n    loading: false,\r\n  },\r\n  reducers: {},\r\n  extraReducers: {\r\n    [getEmailReportsList.fulfilled]: (state, action) => {\r\n      state.rows = action.payload;\r\n    },\r\n    [getEmailReportsListByRange.fulfilled]: (state, action) => {\r\n      state.rows = action.payload;\r\n    },\r\n    [treatEmailReportsListByRange.pending]: (state, action) => {\r\n      state.rows = state.rows.map((item) => {\r\n        return {\r\n          ...item,\r\n          loading: true,\r\n        };\r\n      });\r\n      state.loading = true;\r\n    },\r\n    [treatEmailReportsListByRange.fulfilled]: (state, action) => {\r\n      state.rows = state.rows.map((item) => {\r\n        return {\r\n          ...item,\r\n          loading: false,\r\n        };\r\n      });\r\n      state.loading = false;\r\n    },\r\n    [treatEmailReportsList.pending]: (state, action) => {\r\n      state.rows = state.rows.map((item) => {\r\n        return {\r\n          ...item,\r\n          loading: true,\r\n        };\r\n      });\r\n      state.loading = true;\r\n    },\r\n    [treatEmailReportsList.fulfilled]: (state, action) => {\r\n      state.rows = state.rows.map((item) => {\r\n        return {\r\n          ...item,\r\n          loading: false,\r\n        };\r\n      });\r\n      state.loading = false;\r\n    },\r\n  },\r\n});\r\n\r\nexport const { treatEmails } = emailReportsSlice.actions;\r\n\r\nexport default emailReportsSlice.reducer;\r\n","import { configureStore } from '@reduxjs/toolkit';\r\nimport appReducer from '../slices/appSlice';\r\nimport emailReportsReducer from '../slices/emailReportsSlice';\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    app: appReducer,\r\n    emailReports: emailReportsReducer,\r\n  },\r\n});\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport store from './store/store';\nimport { Provider } from 'react-redux';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","const dateFormater = ({ millisecondsDate, dateFormat }) => {\r\n  const date = new Date(millisecondsDate);\r\n  let DD = date.getDate();\r\n  if (DD < 10) {\r\n    DD = `0${DD}`;\r\n  }\r\n  let MM = date.getMonth() + 1;\r\n  if (MM < 10) {\r\n    MM = `0${MM}`;\r\n  }\r\n  const YYYY = date.getFullYear();\r\n  let HH = date.getHours();\r\n  if (HH < 10) {\r\n    HH = `0${HH}`;\r\n  }\r\n  let hh = date.getHours() % 12 || 12;\r\n  if (hh < 10) {\r\n    hh = `0${hh}`;\r\n  }\r\n  let mm = date.getMinutes();\r\n  if (mm < 10) {\r\n    mm = `0${mm}`;\r\n  }\r\n  let ss = date.getSeconds();\r\n  if (ss < 10) {\r\n    ss = `0${ss}`;\r\n  }\r\n  const milliseconds = date.getMilliseconds();\r\n  let SSS = date.getMilliseconds();\r\n  if (milliseconds < 10) {\r\n    SSS = `0${SSS}`;\r\n  }\r\n  if (milliseconds < 100) {\r\n    SSS = `0${SSS}`;\r\n  }\r\n  SSS = Number(`0.${SSS}`);\r\n  let dateFormatTimeString = dateFormat;\r\n  dateFormatTimeString = dateFormatTimeString.replace(/DD/, DD);\r\n  DD = date.getDate();\r\n  dateFormatTimeString = dateFormatTimeString.replace(/D/, DD);\r\n  dateFormatTimeString = dateFormatTimeString.replace(/MM/, MM);\r\n  MM = date.getMonth() + 1;\r\n  dateFormatTimeString = dateFormatTimeString.replace(/M/, MM);\r\n  dateFormatTimeString = dateFormatTimeString.replace(/YYYY/, YYYY);\r\n  dateFormatTimeString = dateFormatTimeString.replace(\r\n    /YY/,\r\n    YYYY.toString().slice(2),\r\n  );\r\n  dateFormatTimeString = dateFormatTimeString.replace(/HH/, HH);\r\n  HH = date.getHours();\r\n  dateFormatTimeString = dateFormatTimeString.replace(/H/, HH);\r\n  dateFormatTimeString = dateFormatTimeString.replace(/hh/, hh);\r\n  hh = date.getHours() % 12 || 12;\r\n  dateFormatTimeString = dateFormatTimeString.replace(/h/, hh);\r\n  dateFormatTimeString = dateFormatTimeString.replace(/mm/, mm);\r\n  mm = date.getMinutes();\r\n  dateFormatTimeString = dateFormatTimeString.replace(/m/, mm);\r\n  dateFormatTimeString = dateFormatTimeString.replace(/ss/, ss);\r\n  ss = date.getSeconds();\r\n  dateFormatTimeString = dateFormatTimeString.replace(/s/, ss);\r\n  dateFormatTimeString = dateFormatTimeString.replace(\r\n    /SSS/,\r\n    SSS.toFixed(3).slice(2),\r\n  );\r\n  dateFormatTimeString = dateFormatTimeString.replace(\r\n    /SS/,\r\n    SSS.toFixed(2).slice(2),\r\n  );\r\n  dateFormatTimeString = dateFormatTimeString.replace(\r\n    /S/,\r\n    SSS.toFixed(1).slice(2),\r\n  );\r\n  return dateFormatTimeString;\r\n};\r\n\r\nmodule.exports = { dateFormater };\r\n"],"sourceRoot":""}